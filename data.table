#data.table

install.packages("data.table")
library(data.table)
df <- data.frame(x=rnorm(9), y=rep(c("a","b","c"),each = 3), z = rnorm(9))
df
head(df,3)

dt <- data.table(x=rnorm(9), y=rep(c("a","b","c"),each = 3), z = rnorm(9))
dt

identical(df,dt)
#FALSE

class(dt)
#[1] "data.table" "data.frame"
class(df)
#[1] "data.frame"

tables()

#subsetting rows
dt[2,]
dt[dt$y == "b",]

dt[c(2,3)]
dt

'''
> dt
x y           z
1: -1.3309079 a -1.65445164
2:  0.1340448 a  2.16977651
3:  0.0595371 a  0.74216509
4: -0.7689811 b  0.05452198
5: -1.9067215 b  1.70096364
6:  0.8655893 b  1.17745208
7:  0.1009384 c -1.16973896
8:  0.5345664 c  0.27261167
9: -1.3196230 c -0.01362091
> dt[c(2,3)]
x y         z
1: 0.1340448 a 2.1697765
2: 0.0595371 a 0.7421651
'''

dt[,c(2,3)]
#calculating values for variables with expressions

dt[,list(mean(x),sum(z))]
dt[,table(y)]


#adding new columns: ":=" is the syntax to add a new column 
dt[,w:=z^2]
dt

#be careful while copying as it does not create a new copy

# dt2 <- dt
# dt[, y:= 2] - all the y variable changes to 2 
# head(dt2) - here also y changes to 2, better have a copy before to be safe


#Multiple operations:

dt[, m:= {tmp <- (x+z); log2(tmp+5)}]
dt

#plyr like operations:

dt[,a:=x>0]
dt

dt[,b:= mean(x+w), by=a] # calculates mean of x+w and puts that mean into all where a==TRUE, 
dt                       # and calculates mean of x+w where its false and puts it where its all false

#special variables:

set.seed(12)
dt_x <- data.table(x=sample(letters[1:3],10000,TRUE))
dt_x[, .N, by=x]   # counts how the value 10000 is distributed among three of the sample

dt_y <- data.table(x=rep(c("a","b","c"), each = 100), y=rnorm(300))
setkey(dt_y,x)  # the dt_y is set a key of "x"
dt_y['a']   # this selects everything where the key == "a"

#Joins:

dt1 <- data.table(x=c("a","a","b","dt1"), y=1:4)
dt2 <- data.table(x=c("a","b","dt2"), z=5:7)
setkey(dt1,x); setkey(dt2,x)
merge(dt1,dt2)
"x y z
 1: a 1 5
 2: a 2 5
 3: b 3 6
 "
 
# Fast reading


big_df <- data.frame(x=rnorm(1E6), y=rnorm(1E6))
file <- tempfile()

write.table(big_df, file=file, row.names = FALSE, col.names = TRUE, sep = "\t", quote = FALSE)
system.time(fread(file))

system.time(read.table(file, header = TRUE, sep = "\t")) 

"
> system.time(fread(file))
   user  system elapsed 
   0.26    0.08    0.28 
> system.time(read.table(file, header = TRUE, sep = "\t")) 
   user  system elapsed 
   9.50    0.49   10.53
"

#fread command could be applied to reading data tables just like basically a drop-in substitute 
# for read.table tab seperated files



